
import MetaTrader5 as mt5
import pandas as pd

mt5.initialize(login = 78099439, password = '7yEl@jWv',server = 'MetaQuotes-Demo')

symbol = 'GBPUSD'
volume = 0.01
no_of_levels = 10
profit_target = 1



def buy_limit(symbol,volume,price):
        response = mt5.order_send({
                "action": mt5.TRADE_ACTION_PENDING,
                "symbol": symbol,
                "volume": volume,
                "type": mt5.ORDER_TYPE_BUY_LIMIT,
                "price": price,
                "deviation": 20,
                "magic": 100,
                "comment": "python market order",
                "type_time": mt5.ORDER_TIME_GTC,
                "type_filling": mt5.ORDER_FILLING_IOC,
        })
        print(response)

def sell_limit(symbol,volume,price):
        response = mt5.order_send({
                "action": mt5.TRADE_ACTION_PENDING,
                "symbol": symbol,
                "volume": volume,
                "type": mt5.ORDER_TYPE_SELL_LIMIT,
                "price": price,
                "deviation": 20,
                "magic": 100,
                "comment": "python market order",
                "type_time": mt5.ORDER_TIME_GTC,
                "type_filling": mt5.ORDER_FILLING_IOC,
        })
        print(response)



def cal_profit(symbol):

        positions = mt5.positions_get(symbol=symbol)
        df = pd.DataFrame(list(positions), columns=positions[0]._asdict().keys())
        df['time'] = pd.to_datetime(df['time'], unit='s')
        df.drop(['time_update', 'time_msc', 'time_update_msc', 'external_id'], axis=1, inplace=True)
        profit = float(df['profit'].sum())
        return profit

def cal_volume(symbol):

        positions = mt5.positions_get(symbol=symbol)
        df = pd.DataFrame(list(positions), columns=positions[0]._asdict().keys())
        df['time'] = pd.to_datetime(df['time'], unit='s')
        df.drop(['time_update', 'time_msc', 'time_update_msc', 'external_id'], axis=1, inplace=True)
        volume = float(df['volume'].sum())
        return volume


def cal_buy_profit(symbol):

        positions = mt5.positions_get(symbol=symbol)
        df = pd.DataFrame(list(positions), columns=positions[0]._asdict().keys())
        df['time'] = pd.to_datetime(df['time'], unit='s')
        df.drop(['time_update', 'time_msc', 'time_update_msc', 'external_id'], axis=1, inplace=True)
        df = df.loc[df.type == 0]
        profit = float(df['profit'].sum())
        return profit

def cal_sell_profit(symbol):

        positions = mt5.positions_get(symbol=symbol)
        df = pd.DataFrame(list(positions), columns=positions[0]._asdict().keys())
        df['time'] = pd.to_datetime(df['time'], unit='s')
        df.drop(['time_update', 'time_msc', 'time_update_msc', 'external_id'], axis=1, inplace=True)
        df = df.loc[df.type == 1]
        profit = float(df['profit'].sum())
        return profit


def cal_buy_margin(symbol):
        positions = mt5.positions_get(symbol=symbol)
        df = pd.DataFrame(list(positions), columns=positions[0]._asdict().keys())
        df['time'] = pd.to_datetime(df['time'], unit='s')
        df.drop(['time_update', 'time_msc', 'time_update_msc', 'external_id'], axis=1, inplace=True)
        df = df.loc[df.type == 0]
        sum = 0

        for i in df.index:
                volume = df.volume[i]
                open_price = df.price_open[i]
                margin = mt5.order_calc_margin(mt5.ORDER_TYPE_BUY, symbol, volume, open_price)
                sum += margin

        return sum


def cal_sell_margin(symbol):
        positions = mt5.positions_get(symbol=symbol)
        df = pd.DataFrame(list(positions), columns=positions[0]._asdict().keys())
        df['time'] = pd.to_datetime(df['time'], unit='s')
        df.drop(['time_update', 'time_msc', 'time_update_msc', 'external_id'], axis=1, inplace=True)
        df = df.loc[df.type == 1]
        sum = 0

        for i in df.index:
                volume = df.volume[i]
                open_price = df.price_open[i]
                margin = mt5.order_calc_margin(mt5.ORDER_TYPE_BUY, symbol, volume, open_price)
                sum += margin

        return sum




def cal_buy_pct_profit(symbol):
        profit = cal_buy_profit(symbol)
        margin_b = cal_buy_margin(symbol)
        pct_profit = (profit/margin_b) * 100
        return pct_profit

def cal_sell_pct_profit(symbol):
        profit = cal_buy_profit(symbol)
        margin_s = cal_sell_margin(symbol)
        pct_profit = (profit/margin_s) * 100
        return pct_profit

def close_position(position):
    tick = mt5.symbol_info_tick(position.symbol)

    request = {
        "action": mt5.TRADE_ACTION_DEAL,
        "position": position.ticket,
        "symbol": position.symbol,
        "volume": position.volume,
        "type": mt5.ORDER_TYPE_BUY if position.type == 1 else mt5.ORDER_TYPE_SELL,
        "price": tick.ask if position.type == 1 else tick.bid,
        "deviation": 20,
        "magic": 100,
        "comment": "python script close",
        "type_time": mt5.ORDER_TIME_GTC,
        "type_filling": mt5.ORDER_FILLING_IOC,
    }

    result = mt5.order_send(request)
    return result


def close_all(symbol):
        positions = mt5.positions_get(symbol=symbol)
        for i in positions:
                close_position(i)


def delete_pending(ticket):
    close_request = {
        "action": mt5.TRADE_ACTION_REMOVE,
        "order": ticket,
        "type_time": mt5.ORDER_TIME_GTC,
        "type_filling": mt5.ORDER_FILLING_IOC,
    }
    result = mt5.order_send(close_request)

    if result.retcode != mt5.TRADE_RETCODE_DONE:
        result_dict = result._asdict()
        print(result_dict)
    else:
        print('Delete complete...')


def close_all_pending(symbol):
    orders = mt5.orders_get(symbol=symbol)
    df = pd.DataFrame(list(orders), columns=orders[0]._asdict().keys())
    df.drop(['time_done', 'time_done_msc', 'position_id', 'position_by_id', 'reason', 'volume_initial',
             'price_stoplimit'], axis=1, inplace=True)
    df['time_setup'] = pd.to_datetime(df['time_setup'], unit='s')
    for ticket in df.ticket:
        delete_pending(ticket)





def draw_grid(symbol,volume,no_of_levels):
    pct_change_sell = 1
    tick = mt5.symbol_info_tick(symbol)
    current_price_sell = tick.bid

    for i in range(no_of_levels):
        price = ((pct_change_sell / (100 * 100)) * current_price_sell) + current_price_sell
        sell_limit(symbol,volume, price)
        pct_change_sell += 1

    pct_change_buy = -1
    tick = mt5.symbol_info_tick(symbol)
    current_price_buy = tick.bid

    for i in range(no_of_levels):
        price = ((pct_change_buy / (100 * 100)) * current_price_buy) + current_price_buy
        buy_limit(symbol, volume, price)
        pct_change_buy -= 1


draw_grid(symbol,volume,no_of_levels)

while True:
    positions = mt5.positions_get(symbol=symbol)
    if len(positions) > 0:
        margin_s = cal_sell_margin(symbol)
        margin_b = cal_buy_margin(symbol)

        if margin_s > 0:
            pct_profit_sell = cal_sell_pct_profit(symbol)
            if pct_profit_sell >= profit_target:
                close_all(symbol)

        if margin_b > 0:
            pct_profit_buy = cal_buy_pct_profit(symbol)
            if pct_profit_buy >= profit_target:
                close_all(symbol)

        positions = mt5.positions_get(symbol=symbol)
        if len(positions) == 0:
            close_all_pending(symbol)
            break








